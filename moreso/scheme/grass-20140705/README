

  GRASS



	"... words, simple as grass, uncomb'd head, laughter, naivete, ..."

					   (Walt Whitman, "Song of Myself")


This is an implementation of R5RS Scheme, written in Scheme. The
system can be hosted on a variety of Scheme implementations, including
itself. GRASS has been tested on CHICKEN, Scheme48, Gambit-C and
Racket. Support for other interpreters and compilers should be
straightforward but needs a small amount of implementation-specific
code.

Support for numerical operations depend completely on the underlying
implementation. Full continuations are supported, if the host
implementation does. The host implementation MUST provide full
tail-call optimization.

The following procedures are not provided or different from
the behaviour given in the R5RS standard:

- "eval" ignores the optional environment argument
- "rationalize", "null-environment" and "scheme-report-environment" 
  are currently not implemented

A few extensions to R5RS are available.

More documentation is not provided. Consult the source code for more
information. This software is licensed under the three-clause BSD
license - see LICENSE for details.

To build the system, enter

  make IMPLEMENTATION

where IMPLEMENTATION is the name of the host Scheme system. Supported
are currently

  chicken (the default)
  racket
  scheme48
  gambit
  grass

If you have no Scheme system installed, you can build a minimal
CHICKEN runtime system by invoking

  sh tools/bootstrap.sh

Installation is not strictly necessary, the interpreter can be run
in-place. Loading extra libraries expects those to be at
"~/.scheme/lib", moving the source directory to the appropriate place
or creating a symlink should be enough.

If you have questions, suggestions or patches, please contact me at

  felix@call-with-current-continuation.org

I do not actively maintain this software, so I can't promise to react
instantly to bug reports, for example. Feel free to hack the stuff as
you please.


Felix L. Winkelmann
