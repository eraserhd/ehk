// Generated by CoffeeScript 1.6.2
(function() {
  var decode, eachLine, main;

  eachLine = function(input, cb) {
    var buffer, sendLines;

    if (input.resume != null) {
      input.resume();
    }
    input.setEncoding('ascii');
    buffer = '';
    sendLines = function() {
      var endOfLine, _results;

      _results = [];
      while ((endOfLine = buffer.indexOf('\n')) > -1) {
        cb(buffer.substring(0, endOfLine));
        _results.push(buffer = buffer.substring(endOfLine + 1));
      }
      return _results;
    };
    input.on('data', function(chunk) {
      buffer += chunk;
      return sendLines();
    });
    return input.on('end', function() {
      if (buffer.length > 0) {
        return cb(buffer);
      }
    });
  };

  decode = function(columns, text) {
    var i, j, result, rows, unreverseGetter, _i, _j;

    rows = text.length / columns;
    unreverseGetter = function(n) {
      var i, j;

      i = (n / columns) >> 0;
      j = n % columns;
      if (i % 2 === 1) {
        j = columns - j - 1;
      }
      return text[i * columns + j];
    };
    result = '';
    for (j = _i = 0; 0 <= columns ? _i < columns : _i > columns; j = 0 <= columns ? ++_i : --_i) {
      for (i = _j = 0; 0 <= rows ? _j < rows : _j > rows; i = 0 <= rows ? ++_j : --_j) {
        result += unreverseGetter(i * columns + j);
      }
    }
    return result;
  };

  main = function() {
    var columns, wantColumns;

    wantColumns = true;
    columns = -1;
    return eachLine(process.stdin, function(line) {
      if (wantColumns) {
        columns = line | 0;
      } else {
        process.stdout.write(decode(columns, line) + "\n");
      }
      return wantColumns = !wantColumns;
    });
  };

  main();

}).call(this);
